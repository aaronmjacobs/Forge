set(SRC_DIR "${PROJECT_SOURCE_DIR}/Source")

target_sources(${PROJECT_NAME} PRIVATE
   "${SRC_DIR}/ForgeApplication.cpp"
   "${SRC_DIR}/ForgeApplication.h"
   "${SRC_DIR}/Main.cpp"

   "${SRC_DIR}/Core/Assert.h"
   "${SRC_DIR}/Core/Containers/GenerationalArray.h"
   "${SRC_DIR}/Core/Containers/ReflectedMap.h"
   "${SRC_DIR}/Core/Delegate.cpp"
   "${SRC_DIR}/Core/Delegate.h"
   "${SRC_DIR}/Core/Enum.h"
   "${SRC_DIR}/Core/Hash.h"
   "${SRC_DIR}/Core/Log.cpp"
   "${SRC_DIR}/Core/Log.h"

   "${SRC_DIR}/Graphics/Buffer.cpp"
   "${SRC_DIR}/Graphics/Buffer.h"
   "${SRC_DIR}/Graphics/Command.cpp"
   "${SRC_DIR}/Graphics/Command.h"
   "${SRC_DIR}/Graphics/DescriptorSet.cpp"
   "${SRC_DIR}/Graphics/DescriptorSet.h"
   "${SRC_DIR}/Graphics/DescriptorSetLayoutCache.cpp"
   "${SRC_DIR}/Graphics/DescriptorSetLayoutCache.h"
   "${SRC_DIR}/Graphics/GraphicsContext.cpp"
   "${SRC_DIR}/Graphics/GraphicsContext.h"
   "${SRC_DIR}/Graphics/GraphicsResource.h"
   "${SRC_DIR}/Graphics/Material.cpp"
   "${SRC_DIR}/Graphics/Material.h"
   "${SRC_DIR}/Graphics/Memory.cpp"
   "${SRC_DIR}/Graphics/Memory.h"
   "${SRC_DIR}/Graphics/Mesh.cpp"
   "${SRC_DIR}/Graphics/Mesh.h"
   "${SRC_DIR}/Graphics/ShaderModule.cpp"
   "${SRC_DIR}/Graphics/ShaderModule.h"
   "${SRC_DIR}/Graphics/Swapchain.cpp"
   "${SRC_DIR}/Graphics/Swapchain.h"
   "${SRC_DIR}/Graphics/Texture.cpp"
   "${SRC_DIR}/Graphics/Texture.h"
   "${SRC_DIR}/Graphics/UniformBuffer.h"
   "${SRC_DIR}/Graphics/Vulkan.h"

   "${SRC_DIR}/Math/Bounds.cpp"
   "${SRC_DIR}/Math/Bounds.h"
   "${SRC_DIR}/Math/MathUtils.h"
   "${SRC_DIR}/Math/Transform.cpp"
   "${SRC_DIR}/Math/Transform.h"

   "${SRC_DIR}/Platform/InputManager.cpp"
   "${SRC_DIR}/Platform/InputManager.h"
   "${SRC_DIR}/Platform/InputTypes.h"
   "${SRC_DIR}/Platform/Window.cpp"
   "${SRC_DIR}/Platform/Window.h"

   "${SRC_DIR}/Renderer/Passes/Depth/DepthPass.cpp"
   "${SRC_DIR}/Renderer/Passes/Depth/DepthPass.h"
   "${SRC_DIR}/Renderer/Passes/Depth/DepthShader.cpp"
   "${SRC_DIR}/Renderer/Passes/Depth/DepthShader.h"
   "${SRC_DIR}/Renderer/Passes/Forward/ForwardLighting.cpp"
   "${SRC_DIR}/Renderer/Passes/Forward/ForwardLighting.h"
   "${SRC_DIR}/Renderer/Passes/Forward/ForwardRenderPass.cpp"
   "${SRC_DIR}/Renderer/Passes/Forward/ForwardRenderPass.h"
   "${SRC_DIR}/Renderer/Passes/Forward/ForwardShader.cpp"
   "${SRC_DIR}/Renderer/Passes/Forward/ForwardShader.h"
   "${SRC_DIR}/Renderer/Passes/Simple/SimpleRenderPass.cpp"
   "${SRC_DIR}/Renderer/Passes/Simple/SimpleRenderPass.h"
   "${SRC_DIR}/Renderer/Passes/Simple/SimpleShader.cpp"
   "${SRC_DIR}/Renderer/Passes/Simple/SimpleShader.h"
   "${SRC_DIR}/Renderer/PhongMaterial.cpp"
   "${SRC_DIR}/Renderer/PhongMaterial.h"
   "${SRC_DIR}/Renderer/SimpleMaterial.cpp"
   "${SRC_DIR}/Renderer/SimpleMaterial.h"
   "${SRC_DIR}/Renderer/Renderer.cpp"
   "${SRC_DIR}/Renderer/Renderer.h"
   "${SRC_DIR}/Renderer/SceneRenderInfo.h"
   "${SRC_DIR}/Renderer/UniformData.h"
   "${SRC_DIR}/Renderer/View.cpp"
   "${SRC_DIR}/Renderer/View.h"

   "${SRC_DIR}/Resources/LoadedImage.cpp"
   "${SRC_DIR}/Resources/LoadedImage.h"
   "${SRC_DIR}/Resources/MaterialResourceManager.cpp"
   "${SRC_DIR}/Resources/MaterialResourceManager.h"
   "${SRC_DIR}/Resources/MeshResourceManager.cpp"
   "${SRC_DIR}/Resources/MeshResourceManager.h"
   "${SRC_DIR}/Resources/ResourceManager.h"
   "${SRC_DIR}/Resources/ResourceManagerBase.cpp"
   "${SRC_DIR}/Resources/ResourceManagerBase.h"
   "${SRC_DIR}/Resources/ResourceTypes.h"
   "${SRC_DIR}/Resources/ShaderModuleResourceManager.cpp"
   "${SRC_DIR}/Resources/ShaderModuleResourceManager.h"
   "${SRC_DIR}/Resources/TextureResourceManager.cpp"
   "${SRC_DIR}/Resources/TextureResourceManager.h"

   "${SRC_DIR}/Scene/Components/CameraComponent.h"
   "${SRC_DIR}/Scene/Components/LightComponent.h"
   "${SRC_DIR}/Scene/Components/MeshComponent.h"
   "${SRC_DIR}/Scene/Components/TransformComponent.cpp"
   "${SRC_DIR}/Scene/Components/TransformComponent.h"
   "${SRC_DIR}/Scene/Entity.cpp"
   "${SRC_DIR}/Scene/Entity.h"
   "${SRC_DIR}/Scene/Scene.cpp"
   "${SRC_DIR}/Scene/Scene.h"
)

target_include_directories(${PROJECT_NAME} PUBLIC "${SRC_DIR}")

get_target_property(SOURCE_FILES ${PROJECT_NAME} SOURCES)
source_group(TREE "${SRC_DIR}" PREFIX Source FILES ${SOURCE_FILES})
